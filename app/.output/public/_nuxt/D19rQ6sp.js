import{a3 as o,aa as c,ai as A,a5 as n,a9 as I,a4 as K,a6 as E,aj as Q,ak as h,a2 as k,a7 as B,al as _,am as N,a1 as R,an as j,K as O,g as U,Z as V,$ as u,q as x}from"./DIPFmy-v.js";import{a as P,e as Z}from"./CPAmBVur.js";const z=A(["daily","monthly","weekly","yearly"]),v=o({id:n(),repetitionCount:n(),frequency:z,endDate:c().datetime({offset:!0})}),H=v.pick({frequency:!0,repetitionCount:!0,endDate:!0}),y=o({id:n({required_error:"Identifiant requis",invalid_type_error:"L'identifiant doit être un nombre"}),amount:n({required_error:"Le montant est requis",invalid_type_error:"Le montant doit être un nombre"}).positive("Le montant doit être positif"),title:c({required_error:"Le titre est requis",invalid_type_error:"Le titre doit être une chaîne de caractères"}).min(3,"Le titre doit contenir au moins 3 caractères").max(255,"Le titre doit contenir au maximum 255 caractères"),groupe:B.shape.id,category:k,creator:h,spentAt:Q,recurring:v.nullable(),participants:E(h,{invalid_type_error:"Les participants doivent être une liste d'utilisateurs"}).optional()}),te=o({id:n().optional(),categoryId:n().optional(),title:y.shape.title,amount:y.shape.amount,spentAt:N(),authorId:_.shape.id,groupId:B.shape.id,recurring:H.nullable().optional(),participants:E(_.shape.id)}),J=y.pick({amount:!0,id:!0,title:!0,category:!0}).extend({creator:h.pick({picture:!0,username:!0})}),W=E(J,{invalid_type_error:"Les dépenses doivent être une liste"}),g=I(K,W),X=()=>{const{$api:s}=R();return{getExpenseById:e=>s.get({url:`expenses/${e}`,schema:y}),getAllExpensesByGroup:e=>s.get({url:`expenses/groupe/${e}/list`,schema:g}),getMonthlyExpensesByGroup:(e,r)=>s.get({url:`expenses/groupe/${e}/mois/${P(r)}/list`,schema:g}),getExpensesByCategory:e=>s.get({url:`expenses/category/${e}/list`,schema:g}),postExpense:e=>s.post({url:"expenses",body:e,schema:o({message:c()})}),patchExpense:(e,r)=>s.patch({url:`expenses/${e}`,body:r,schema:o({message:c()})}),deleteExpense:e=>s.delete({url:`expenses/${e}`,schema:j()})}},se=()=>{const s=O(),{group_id:t,category_id:p,expense_id:a}=s.params,i=U(),{postExpense:q,getExpenseById:S,patchExpense:b,deleteExpense:e,getAllExpensesByGroup:r,getExpensesByCategory:f,getMonthlyExpensesByGroup:M}=X(),d=V(),l=async()=>{await Promise.all([d.invalidateQueries({queryKey:["expenses-by-group",t]}),d.invalidateQueries({queryKey:["budget","remaining",Number(t)]})])},{data:C}=u({queryKey:["expense-by-id",a],queryFn:()=>S(a),enabled:!!a}),L=x({mutationFn:m=>q(m),onSuccess:async()=>{await l(),i.push({name:"group",params:{group_id:t}})}}),w=x({mutationFn:m=>b(a,m),onSuccess:async()=>{await d.invalidateQueries({queryKey:["expense-by-id",a]}),await l(),await i.push({name:"expense",params:{id:a,group_id:t}})}}),D=x({mutationFn:()=>e(a),onSuccess:async()=>{await l(),i.push({name:"group",params:{group_id:t}})}}),{data:F}=u({queryKey:["expenses-by-group",t],queryFn:()=>r(t),enabled:!!t}),{data:G}=u({queryKey:["expenses-by-category",p],queryFn:()=>f(p),enabled:p!==void 0}),{data:T,refetch:$}=u({queryKey:["expenses-monthly-group",t],queryFn:()=>M(t,Z())});return{expenses:F,expense:C,createExpenseMutation:L,updateExpenseMutation:w,deleteExpenseMutation:D,expensesByCategory:G,expensesByMonthAndGroup:T,refetchByMonthAndGroup:$}};export{z as F,te as N,se as u};
