import{a6 as o,ab as c,ak as I,a8 as n,ac as k,a7 as K,a9 as E,al as Q,am as h,a5 as N,aa as v,an as _,ao as R,a4 as O,ap as U,H as V,f as j,a1 as z,a2 as u,x,z as H}from"./DZ2khTnM.js";import{a as P,e as J}from"./CPAmBVur.js";const W=I(["daily","monthly","weekly","yearly"]),B=o({id:n(),repetitionCount:n(),frequency:W,endDate:c().datetime({offset:!0})}),X=B.pick({frequency:!0,repetitionCount:!0,endDate:!0}),y=o({id:n({required_error:"Identifiant requis",invalid_type_error:"L'identifiant doit être un nombre"}),amount:n({required_error:"Le montant est requis",invalid_type_error:"Le montant doit être un nombre"}).positive("Le montant doit être positif"),title:c({required_error:"Le titre est requis",invalid_type_error:"Le titre doit être une chaîne de caractères"}).min(3,"Le titre doit contenir au moins 3 caractères").max(255,"Le titre doit contenir au maximum 255 caractères"),groupe:v.shape.id,category:N,creator:h,spentAt:Q,recurring:B.nullable(),participants:E(h,{invalid_type_error:"Les participants doivent être une liste d'utilisateurs"}).optional()}),ae=o({id:n().optional(),categoryId:n().optional(),title:y.shape.title,amount:y.shape.amount,spentAt:R(),authorId:_.shape.id,groupId:v.shape.id,recurring:X.nullable().optional(),participants:E(_.shape.id)}),Y=y.pick({amount:!0,id:!0,title:!0,category:!0}).extend({creator:h.pick({picture:!0,username:!0})}),Z=E(Y,{invalid_type_error:"Les dépenses doivent être une liste"}),g=k(K,Z),ee=()=>{const{$api:s}=O();return{getExpenseById:e=>s.get({url:`expenses/${e}`,schema:y}),getAllExpensesByGroup:e=>s.get({url:`expenses/groupe/${e}/list`,schema:g}),getMonthlyExpensesByGroup:(e,r)=>s.get({url:`expenses/groupe/${e}/mois/${P(r)}/list`,schema:g}),getExpensesByCategory:e=>s.get({url:`expenses/category/${e}/list`,schema:g}),postExpense:e=>s.post({url:"expenses",body:e,schema:o({message:c()})}),patchExpense:(e,r)=>s.patch({url:`expenses/${e}`,body:r,schema:o({message:c()})}),deleteExpense:e=>s.delete({url:`expenses/${e}`,schema:U()})}},ne=()=>{const s=V(),{group_id:t,category_id:p,expense_id:a}=s.params,i=j(),{postExpense:q,getExpenseById:S,patchExpense:b,deleteExpense:e,getAllExpensesByGroup:r,getExpensesByCategory:f,getMonthlyExpensesByGroup:M}=ee(),{trackMatomoEvent:C}=H(),d=z(),l=async()=>{await Promise.all([d.invalidateQueries({queryKey:["expenses-by-group",t]}),d.invalidateQueries({queryKey:["budget","remaining",Number(t)]})])},{data:L}=u({queryKey:["expense-by-id",a],queryFn:()=>S(a),enabled:!!a}),T=x({mutationFn:m=>q(m),onSuccess:async()=>{await l(),C("Expense","Create","create_expense"),i.push(`/groups/${t}`)}}),$=x({mutationFn:m=>b(a,m),onSuccess:async()=>{await d.invalidateQueries({queryKey:["expense-by-id",a]}),await l(),await i.push({name:"expense",params:{id:a,group_id:t}})}}),w=x({mutationFn:()=>e(a),onSuccess:async()=>{await l(),i.push(`/groups/${t}`)}}),{data:D}=u({queryKey:["expenses-by-group",t],queryFn:()=>r(t),enabled:!!t}),{data:F}=u({queryKey:["expenses-by-category",p],queryFn:()=>f(p),enabled:p!==void 0}),{data:G,refetch:A}=u({queryKey:["expenses-monthly-group",t],queryFn:()=>M(t,J())});return{expenses:D,expense:L,createExpenseMutation:T,updateExpenseMutation:$,deleteExpenseMutation:w,expensesByCategory:F,expensesByMonthAndGroup:G,refetchByMonthAndGroup:A}};export{W as F,ae as N,ne as u};
