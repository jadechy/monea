import{a1 as w,$ as M,g as F,q as o,x as f}from"./B4C1c3y9.js";const E=t=>{const{postGroup:s,editGroup:i,deleteGroup:c,uploadFile:l}=w(),p=M(),a=async()=>{await Promise.all([p.invalidateQueries({queryKey:["groups-by-user"]})])},u=F(),{trackMatomoEvent:d}=f(),m=o({mutationFn:e=>s(e),onSuccess:async()=>{await a(),u.push({name:"groups"})}}),y=o({mutationFn:e=>{var r;return(r=t==null?void 0:t.value)!=null&&r.id?(d("Group","Create","create_group"),i(t.value.id,e)):Promise.reject(new Error("ID du groupe manquant"))},onSuccess:async()=>{await a(),u.push({name:"groups"})}}),v=o({mutationFn:()=>{var e;return(e=t.value)!=null&&e.id?c(t.value.id):Promise.reject(new Error("ID du groupe manquant"))},onSuccess:async()=>{await a(),u.push({name:"groups"})}}),G=o({mutationFn:async e=>{var n;const r=new FormData;return r.append("picture",e),l(Number((n=t.value)==null?void 0:n.id),r)},onSuccess:async()=>{await a()},onError:e=>{console.error("Upload failed",e),alert("Erreur lors de l'upload")}});return{createGroupMutation:m,editGroupMutation:y,deleteGroupMutation:v,uploadCoverGroupMutation:G}};export{E as u};
