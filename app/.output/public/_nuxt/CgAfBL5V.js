import{a4 as o,ab as c,aj as I,a6 as n,aa as k,a5 as K,a7 as E,ak as Q,al as h,a3 as N,a8 as v,am as _,an as R,a2 as j,ao as O,G as U,g as V,$ as P,a0 as u,q as x,x as z}from"./B4C1c3y9.js";import{a as H,e as J}from"./CPAmBVur.js";const W=I(["daily","monthly","weekly","yearly"]),B=o({id:n(),repetitionCount:n(),frequency:W,endDate:c().datetime({offset:!0})}),X=B.pick({frequency:!0,repetitionCount:!0,endDate:!0}),y=o({id:n({required_error:"Identifiant requis",invalid_type_error:"L'identifiant doit être un nombre"}),amount:n({required_error:"Le montant est requis",invalid_type_error:"Le montant doit être un nombre"}).positive("Le montant doit être positif"),title:c({required_error:"Le titre est requis",invalid_type_error:"Le titre doit être une chaîne de caractères"}).min(3,"Le titre doit contenir au moins 3 caractères").max(255,"Le titre doit contenir au maximum 255 caractères"),groupe:v.shape.id,category:N,creator:h,spentAt:Q,recurring:B.nullable(),participants:E(h,{invalid_type_error:"Les participants doivent être une liste d'utilisateurs"}).optional()}),ae=o({id:n().optional(),categoryId:n().optional(),title:y.shape.title,amount:y.shape.amount,spentAt:R(),authorId:_.shape.id,groupId:v.shape.id,recurring:X.nullable().optional(),participants:E(_.shape.id)}),Y=y.pick({amount:!0,id:!0,title:!0,category:!0}).extend({creator:h.pick({picture:!0,username:!0})}),Z=E(Y,{invalid_type_error:"Les dépenses doivent être une liste"}),g=k(K,Z),ee=()=>{const{$api:s}=j();return{getExpenseById:e=>s.get({url:`expenses/${e}`,schema:y}),getAllExpensesByGroup:e=>s.get({url:`expenses/groupe/${e}/list`,schema:g}),getMonthlyExpensesByGroup:(e,r)=>s.get({url:`expenses/groupe/${e}/mois/${H(r)}/list`,schema:g}),getExpensesByCategory:e=>s.get({url:`expenses/category/${e}/list`,schema:g}),postExpense:e=>s.post({url:"expenses",body:e,schema:o({message:c()})}),patchExpense:(e,r)=>s.patch({url:`expenses/${e}`,body:r,schema:o({message:c()})}),deleteExpense:e=>s.delete({url:`expenses/${e}`,schema:O()})}},ne=()=>{const s=U(),{group_id:t,category_id:p,expense_id:a}=s.params,i=V(),{postExpense:q,getExpenseById:S,patchExpense:b,deleteExpense:e,getAllExpensesByGroup:r,getExpensesByCategory:M,getMonthlyExpensesByGroup:f}=ee(),{trackMatomoEvent:C}=z(),d=P(),l=async()=>{await Promise.all([d.invalidateQueries({queryKey:["expenses-by-group",t]}),d.invalidateQueries({queryKey:["budget","remaining",Number(t)]})])},{data:$}=u({queryKey:["expense-by-id",a],queryFn:()=>S(a),enabled:!!a}),G=x({mutationFn:m=>q(m),onSuccess:async()=>{await l(),C("Expense","Create","create_expense"),i.push(`/groups/${t}`)}}),L=x({mutationFn:m=>b(a,m),onSuccess:async()=>{await d.invalidateQueries({queryKey:["expense-by-id",a]}),await l(),await i.push({name:"expense",params:{id:a,group_id:t}})}}),T=x({mutationFn:()=>e(a),onSuccess:async()=>{await l(),i.push(`/groups/${t}`)}}),{data:w}=u({queryKey:["expenses-by-group",t],queryFn:()=>r(t),enabled:!!t}),{data:D}=u({queryKey:["expenses-by-category",p],queryFn:()=>M(p),enabled:p!==void 0}),{data:F,refetch:A}=u({queryKey:["expenses-monthly-group",t],queryFn:()=>f(t,J())});return{expenses:w,expense:$,createExpenseMutation:G,updateExpenseMutation:L,deleteExpenseMutation:T,expensesByCategory:D,expensesByMonthAndGroup:F,refetchByMonthAndGroup:A}};export{W as F,ae as N,ne as u};
